openapi: 3.0.3
info:
  title: Moo've
  description: "Moo've Fitness Tracker"
  contact:
    email: moove@digicow.net
  version: 1.1.0
servers:
  - url: https://moove.digicowsoftware.com/api/v1
security:
  - Session: []
paths:
  /auth/login:
    post:
      security:
        - Password: []
      summary: Initiate an authenticated login session
      x-mojo-to: Auth#login
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSession"
      tags:
        - Auth
  /auth/status:
    get:
      security: []
      summary: Find out whether the user is logged in
      x-mojo-to: Auth#status
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSession"
      tags:
        - Auth
  /auth/logout:
    post:
      security: []
      summary: End a login session
      x-mojo-to: Auth#logout
      responses:
        204:
          description: Success
          content:
            text/plain:
              schema:
                type: string
      tags:
        - Auth
  /admin/users/{userID}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      security:
        - Session: ["admin"]
      summary: Get a user
      x-mojo-to: Admin::User#get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - Admin
    patch:
      security:
        - Session: ["admin"]
      summary: Update a user
      x-mojo-to: Admin::User#update
      requestBody:
        description: The User parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - Admin
    delete:
      security:
        - Session: ["admin"]
      summary: Delete a user
      x-mojo-to: Admin::User#delete
      responses:
        204:
          description: OK
          content:
            text/plain:
              schema:
                type: string
      tags:
        - Admin
  /meta/values:
    get:
      summary: Get one or more value lookup tables
      x-mojo-to: Meta#list
      parameters:
        - in: query
          name: all
          required: false
          schema:
            type: boolean
        - in: query
          name: activityTypes
          required: false
          schema:
            type: boolean
        - in: query
          name: dimensions
          required: false
          schema:
            type: boolean
        - in: query
          name: eventTypes
          required: false
          schema:
            type: boolean
        - in: query
          name: eventReferenceTypes
          required: false
          schema:
            type: boolean
        - in: query
          name: unitOfMeasure
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  activityTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActivityType"
                  eventTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventType"
                  eventReferenceTypes:
                    type: array
      tags:
        - Meta
  /events:
    get:
      summary: Get an optionally-filtered list of /events
      x-mojo-to: Event#list
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Pagelen"
        - in: query
          name: start
          required: false
          schema:
            type: string
            format: datetime
        - in: query
          name: end
          required: false
          schema:
            type: string
            format: datetime
        - in: query
          name: name
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEvents"
      tags:
        - Event
  /events/{eventID}:
    parameters:
      - $ref: "#/components/parameters/EventID"
    get:
      summary: Get an event
      x-mojo-to: Event#get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
      tags:
        - Event
  /users:
    get:
      summary: Get an optionally-filtered list of all users
      x-mojo-to: User#list
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Pagelen"
        - in: query
          name: username
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
      tags:
        - User
    post:
      summary: Create a user
      x-mojo-to: User#create
      requestBody:
        description: The User parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - User
  /users/{userID}:
    parameters:
      - $ref: "#/components/parameters/UserID"
    get:
      summary: Get a user
      x-mojo-to: User#get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - User
    patch:
      summary: Update a user
      x-mojo-to: User#update
      requestBody:
        description: The User parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - User
    delete:
      summary: Delete a user
      x-mojo-to: User#delete
      responses:
        204:
          description: OK
          content:
            text/plain:
              schema:
                type: string
      tags:
        - User
components:
  parameters:
    EventID:
      in: path
      name: eventID
      description: The ID number of the event
      required: true
      schema:
        $ref: "#/components/schemas/DatabaseID"
    UserID:
      in: path
      name: userID
      description: The ID number of the user
      required: true
      schema:
        $ref: "#/components/schemas/DatabaseID"
    Page:
      in: query
      name: page
      description: Results page number
      required: false
      schema:
        type: integer
        minimum: 1
    Pagelen:
      in: query
      name: pagelen
      description: Results page length
      required: false
      schema:
        type: integer
        minimum: 1
  schemas:
    DatabaseID:
      type: integer
      minimum: 1
    ActivityType:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        description:
          type: string
    Address:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        phone:
          type: string
        country:
          type: string
        email:
          type: string
    Event:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        name:
          type: string
        entrants:
          type: integer
          nullable: true
        scheduledStart:
          type: string
          format: date-time
        url:
          type: string
          format: uri
          nullable: true
        eventTypeID:
          $ref: "#/components/schemas/DatabaseID"
        distance:
          $ref: "#/components/schemas/UnitValue"
        address:
          $ref: "#/components/schemas/Address"
    PaginatedEvents:
      type: object
      additionalProperties: false
      required:
        - meta
        - elements
      properties:
        meta:
          $ref: "#/components/schemas/Pagination"
        elements:
          type: array
          items:
            $ref: "#/components/schemas/Event"
    EventType:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        activityTypeID:
          $ref: "#/components/schemas/DatabaseID"
        activityType:
          $ref: "#/components/schemas/ActivityType"
        description:
          type: string
    Person:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        firstname:
          type: string
        lastname:
          type: string
    User:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        username:
          type: string
        person:
          $ref: "#/components/schemas/Person"
        roles:
          type: array
          items:
            type: string
    PaginatedUsers:
      type: object
      additionalProperties: false
      required:
        - meta
        - elements
      properties:
        meta:
          $ref: "#/components/schemas/Pagination"
        elements:
          type: array
          items:
            $ref: "#/components/schemas/User"
    Unit:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        label:
          type: string
        abbreviation:
          type: string
        normalizationFactor:
          type: number
          minimum: 0
    UnitValue:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/DatabaseID"
        value:
          type: number
          minimum: 0
        unitID:
          $ref: "#/components/schemas/DatabaseID"
    LoginSession:
      type: object
      required:
        - user
        - expiration
      properties:
        user:
          $ref: "#/components/schemas/User"
        expiration:
          type: string
          format: date-time
    Pagination:
      type: object
      required:
        - count
        - total
        - page
        - pagelen
      additionalProperties: false
      properties:
        count:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        pagelen:
          type: integer
          minimum: 1
        next:
          type: string
          format: uri
        previous:
          type: string
          format: uri
    NullValue:
      not:
        anyOf:
          - type: string
          - type: number
          - type: boolean
          - type: object
          - type: array
  securitySchemes:
    Password:
      type: http
      scheme: basic
    Session:
      type: apiKey
      name: mojolicious
      in: cookie
tags:
  - name: Admin
    description: Administrative functions
  - name: Auth
    description: Login and logout functions
  - name: Meta
    description: Application-wide value lists
  - name: User
  - name: Activity
  - name: Event
  - name: Goal
